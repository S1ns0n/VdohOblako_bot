from aiogram import Bot, types, F
from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from yandex_api.yandex_api import YandexManager
from .keyboards import Keyboards
from .utils import Utils
from config.config import Config
from .disk_manager_router import start_disk

from database.database import (
    create_user,
    get_all_users,
    get_user_by_tg_id,
    delete_user,
    get_user_count,
    check_user_exists
)

class RegState(StatesGroup):
    password = State()


registration_router = Router()
keyboards = Keyboards()


@registration_router.message(Command('start'))
async def start_bot(message: types.Message, bot: Bot):

    loading_msg = await bot.send_message(message.from_user.id, "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...")
    if await check_user_exists(message.from_user.id):
        await start_disk(message=message,
                         bot=bot)
        await loading_msg.delete()
        return

    await loading_msg.edit_text(text=f"üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                                    "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ê–ù–û ¬´–í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª–∏¬ª üåü.\n\n"
                                    "‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç üòâ.\n\n"
                                    "üì© –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:\n"
                                    "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–∞–ø–∏—à–∏—Ç–µ @Gllushkoff ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç! ‚ú®",
                                reply_markup= await keyboards.new_user_board())



    # await create_user(tg_id=message.from_user.id)
    # await loading_msg.edit_text(
    #     text=f"–í—ã –∑–∞—Ä–µ–≥–∞–Ω—ã!")

@registration_router.callback_query(F.data == "reg_enter_password")
async def start_reg(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    try:
        await bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=None
        )
    except:
        pass
    await callback.answer()
    await state.set_state(RegState.password)
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:")


@registration_router.message(RegState.password)
async def process_password(message: types.Message, bot: Bot, state: FSMContext):
    if message.text.strip() == Config.PASSWORD:
        await create_user(tg_id=message.from_user.id)
        await state.clear()
        await message.answer(text=f"üéâ –û—Ç–ª–∏—á–Ω–æ!\n"
                                "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π ‚Äî —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø! ‚úÖ \n\n"
                                "üåü <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?</b>\n"
                                "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ –≤—Å–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º (–ø–∞–ø–∫–∞–º) –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞ –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç—É–¥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n"
                                
                                "üîç <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>\n"
                                "1Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É ‚Äî –ø–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.\n"
                                "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É¬ª ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.\n"
                                "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å—Ç–µ –∏—Ö –≤ —á–∞—Ç, –∏ –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫!\n"
                                "üí° –ì–æ—Ç–æ–≤–æ! –í–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. üòä",
                             parse_mode=ParseMode.HTML,
                             reply_markup=await keyboards.go_to_disk_board())
    else:
        await message.answer(text=f"üö® –£–ø—Å!\n"
                                "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å üò¨.\n"
                                "üîê –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @Gllushkoff, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø.\n")
        return

@registration_router.callback_query(F.data == "go_to_disk")
async def go_to_disk(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    await start_disk(message=callback.message,
                     bot=bot)
